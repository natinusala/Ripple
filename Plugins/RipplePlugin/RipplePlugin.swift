/*
    Copyright 2021 natinusala

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

import PackagePlugin

#if os(Linux)
let separator = "/"
#else
#error("Please set `separator` for your platform")
#endif

/// A Ripple plugin build command.
struct BuildCommand {
    /// The tool to use for the build command. Arguments of the tool must be
    /// `input output`.
    var tool: String

    /// Must return `true` if the build command applies to this file, `false`
    /// otherwise.
    var filter: (File) -> Bool

    /// Name of the Swift file generated by the build command. Must be unique across all build commands. Must end with `.swift`.
    /// Will be compiled as a regular Swift file as part of the module.
    var outputName: (File) -> String

    /// String displayed to the user while the build command runs.
    var displayName: (Target, File) -> String
}

let buildCommands = [
    // Resources generator
    BuildCommand(
        tool: "ResourcesCodegen",
        filter: { $0.type == .resource },
        outputName: { "\($0.path.lastComponent).swift" },
        displayName: { "Processing \($0.name) \($1.path.lastComponent)" }
    ),
    // Rippling generator
    BuildCommand(
        tool: "RipplingCodegen",
        filter: { $0.type == .source },
        outputName: { "\($0.path.stem)_RipplingExtensions.swift" },
        displayName: { "Generating rippling extensions of \($0.name) \($1.path.lastComponent)" }
    ),
]

/// SwiftPM plugin that creates commands for various codegen executables:
///     - `ResourcesCodegen` for every resource file in the target
///     - `RipplingCodegen` for every Swift file in the target
@main
struct RipplePlugin: BuildToolPlugin {
    func createBuildCommands(context: PluginContext, target: Target) throws -> [Command] {
        var commands: [Command] = []

        guard let target = target as? SwiftSourceModuleTarget else {
            return []
        }

        for input in target.sourceFiles {
            for command in buildCommands {
                if !command.filter(input) {
                    continue
                }

                let tool = try context.tool(named: command.tool)
                let output = context.pluginWorkDirectory.appending(command.outputName(input))

                commands.append(
                    .buildCommand(
                        displayName: command.displayName(target, input),
                        executable: tool.path,
                        arguments: [input.path.string, output.string],
                        inputFiles: [input.path],
                        outputFiles: [output]
                    )
                )
            }
        }

        return commands
    }
}
